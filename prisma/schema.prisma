generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  emailVerified   DateTime?
  image           String?
  userType        String           @default("user")
  accounts        Account[]
  sessions        Session[]
  speakingResults SpeakingResult[]
  preferences     UserPreference?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

// ユーザー設定モデル
model UserPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  defaultThinkTime  Int      @default(30)
  defaultSpeakTime  Int      @default(60)
  defaultThemeLevel String   @default("Middle")
  autoReadTheme     Boolean  @default(false)
  showTheme         Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model SpeakingResult {
  id                 String              @id @default(cuid())
  userId             String
  theme              String              @db.Text
  user               User                @relation(fields: [userId], references: [id])
  level              String // ThemeLevelからStringに変更
  thinkTime          Int
  speakTime          Int
  spokenText         String              @db.Text // 長文対応
  aiEvaluation       String?             @db.Text
  aiImprovedText     String?             @db.Text
  evaluationRequests EvaluationRequest[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([userId, createdAt])
}

model EvaluationRequest {
  id               String         @id @default(cuid())
  speakingResultId String
  speakingResult   SpeakingResult @relation(fields: [speakingResultId], references: [id])
  requestBody      String         @db.Text
  responseBody     String         @db.Text
  status           String // 処理状態
  createdAt        DateTime       @default(now())

  @@index([speakingResultId])
}

model OrganizationUser {
  id             String       @id @default(cuid())
  name           String
  email          String       @unique
  password       String
  userType       String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  groups         Group[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Organization {
  id               String             @id @default(cuid())
  name             String
  description      String
  organizationType String
  users            OrganizationUser[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Group            Group[]
}

model Group {
  id             String             @id @default(cuid())
  name           String
  organizationId String
  organization   Organization       @relation(fields: [organizationId], references: [id])
  members        OrganizationUser[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}
